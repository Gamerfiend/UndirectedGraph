/**
* Graph struct responsible for storing an undirected graph
* Tyler Bezera
*/

struct Node[T] {
    var data: T;
    var neighbors: Vector[Ptr[Node[T]]];
    var allocator: Box[Allocator];

    public static function new(allocator: Box[Allocator], data: T): Node[T] {
        return struct Self {
            data,
            allocator,
        };
    }

    rules{
        ($this.Hashable.hash()) => $this.data.Hashable.hash(); 
    }
}

struct Graph[T] {
    private var vertices: Int;
    private var edges: Int;
    private var adjacencyMap: Map[Ptr[Node[T]], Vector[Ptr[Node[T]]]];
    private var allocator: Box[Allocator];

    public static function new(allocator: Box[Allocator]): Graph[T] using implicit allocator {
        var graph: Ptr[Graph[T]] = allocator.alloc(sizeof Graph[T]);
        graph.vertices = 0;
        graph.edges = 0;
        graph.adjacencyMap = Map.new(10);
        graph.allocator = allocator;

        return &graph;
    }

    function addEdge(firstVertex: Ptr[Node[T]], secondVertex: Ptr[Node[T]]) {
        this.addNewEdge(firstVertex, secondVertex);
        this.addNewEdge(secondVertex, firstVertex);
    }

    private function addNewEdge(firstVertex: Ptr[Node[T]], secondVertex: Ptr[Node[T]]){
        if(!this.adjacencyMap.exists(firstVertex)) {
            this.adjacencyMap.put(firstVertex, Vector.new(10));
            this.adjacencyMap.get(firstVertex).unwrap().push(secondVertex);
        }
        else {
            this.adjacencyMap.get(firstVertex).unwrap().push(secondVertex);
        }
        this.vertices++;
        this.edges++;
    }

    function adjacentVertices(sourceVertex: Ptr[Node[T]]): Vector[Ptr[Node[T]]] {
        if(this.adjacencyMap.exists(sourceVertex)){
            return this.adjacencyMap.get(sourceVertex).unwrap();
        }
    }

    function numVertices(): Int {
        return this.vertices;
    }

    function numEdges(): Int {
        return this.edges;
    }

    function toString(): CString {
    }
}